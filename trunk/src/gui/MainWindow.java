/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 */

package gui;

import graphics.primitives.impl.Rectangle;
import graphics.primitives.GraphicPrimitive;
import graphics.primitives.impl.PolyLine;
import graphics.primitives.impl.Point;
import graphics.primitives.impl.Curve;
import graphics.primitives.impl.Line;
import graphics.primitives.impl.Oval;
import graphics.primitives.impl.Circle;
import gui.panels.GraphicPrimitivesTableModel;
import controllers.DrawingController;
import controllers.DrawingStateController;
import controllers.ImageController;
import controllers.PersistenceController;
import graphics.primitives.impl.Arc;
import gui.celleditors.ColorEditor;
import gui.cellrenderers.ColorCellRenderer;
import gui.cellrenderers.TitleCellRenderer;
import gui.tablemodels.ColorTableModel;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableCellRenderer;


public class MainWindow extends JFrame implements RefreshListener,ListSelectionListener,CellEditorListener, ActionListener {
    private DrawingController drawingController;
    private PersistenceController persistenceController;
    private ColorEditor colorEditor;
    private final JFileChooser fc = new JFileChooser();

    /**
     *  Creates new form MainWindow
     */
    public MainWindow () {
        super();

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        initComponents();
        persistenceController = new PersistenceController();
        drawingController = new DrawingController((Canvas)pnlCanvas);
        drawingController.addRefreshListener(this);


        Canvas.getCanvasInstance().addKeyListener(drawingController);
        Canvas.getCanvasInstance().addComponentListener(drawingController);

        Canvas.getCanvasInstance().setGridEnabled(false);

        Canvas.getCanvasInstance().requestFocus();

        graphicPrimitivesPanel.getGraphicPrimitivesTableModel().setGraphicPrimitives(
                Canvas.getCanvasInstance().getImageController().getGraphicPrimitives() );

        graphicPrimitivesPanel.getTblGraphicsPrimitive().getSelectionModel().addListSelectionListener(this);
        initializeCellEditor();
        colorEditor = new ColorEditor();
        colorEditor.addCellEditorListener(this);
        tblColorChooser.getColumnModel().getColumn(1).setCellEditor(colorEditor);
        tblColorChooser.getColumnModel().getColumn(1).setPreferredWidth(30);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        tbarPositionsPanel = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        spltCentral = new javax.swing.JSplitPane();
        tbarControl = new javax.swing.JToolBar();
        spltPropertiesObjects = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        pnlColors = new javax.swing.JPanel();
        tblColorChooser = new JTable() {
            public TableCellRenderer getCellRenderer(int row, int column) {
                if (column == 1) {
                    return new ColorCellRenderer(true);
                } else {
                    return new TitleCellRenderer();
                }
            }
        };
        graphicPrimitivesPanel = new gui.panels.GraphicPrimitivesPanel(this);
        scrollPane = new javax.swing.JScrollPane();
        pnlCanvas = Canvas.getCanvasInstance();
        toolBar = new javax.swing.JToolBar();
        btnPoint = new javax.swing.JButton();
        btnLine = new javax.swing.JButton();
        btnPolyLine = new javax.swing.JButton();
        btnRectangle = new javax.swing.JButton();
        btnCurve = new javax.swing.JButton();
        btnCircle = new javax.swing.JButton();
        btnOval = new javax.swing.JButton();
        btnArc = new javax.swing.JButton();
        btnJoin = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemNew = new javax.swing.JMenuItem();
        menuItemOpen = new javax.swing.JMenuItem();
        menuItemSave = new javax.swing.JMenuItem();
        menuItemSaveAs = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuItemRefresh = new javax.swing.JMenuItem();
        menuItemClearSelection = new javax.swing.JMenuItem();

        jButton1.setText("jButton1");

        jButton2.setText("jButton2");

        jButton3.setText("jButton3");

        jButton4.setText("jButton4");

        jButton5.setText("jButton5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Java CAD");
        setMinimumSize(new java.awt.Dimension(640, 480));
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        tbarPositionsPanel.setLayout(new java.awt.BorderLayout());

        mainPanel.setLayout(new java.awt.BorderLayout());

        spltCentral.setBorder(null);
        spltCentral.setDividerLocation(500);
        spltCentral.setDividerSize(2);
        spltCentral.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        spltCentral.setResizeWeight(0.9);

        tbarControl.setFloatable(false);
        tbarControl.setOrientation(1);
        tbarControl.setRollover(true);
        tbarControl.setMaximumSize(new java.awt.Dimension(200, 200));
        tbarControl.setPreferredSize(new java.awt.Dimension(250, 404));

        spltPropertiesObjects.setBorder(null);
        spltPropertiesObjects.setDividerLocation(200);
        spltPropertiesObjects.setDividerSize(1);
        spltPropertiesObjects.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        spltPropertiesObjects.setResizeWeight(0.8);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        pnlColors.setBackground(new java.awt.Color(155, 155, 155));
        pnlColors.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));
        pnlColors.setPreferredSize(new java.awt.Dimension(150, 100));
        pnlColors.setLayout(new java.awt.BorderLayout());

        tblColorChooser.setBackground(new java.awt.Color(205, 205, 205));
        tblColorChooser.setModel(colorTableModel);
        tblColorChooser.setMaximumSize(new java.awt.Dimension(120, 32));
        tblColorChooser.setOpaque(false);
        tblColorChooser.setPreferredSize(new java.awt.Dimension(120, 30));
        tblColorChooser.setRowSelectionAllowed(false);
        tblColorChooser.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblColorChooser.setShowHorizontalLines(false);
        tblColorChooser.setShowVerticalLines(false);
        tblColorChooser.getTableHeader().setResizingAllowed(false);
        tblColorChooser.getTableHeader().setReorderingAllowed(false);
        pnlColors.add(tblColorChooser, java.awt.BorderLayout.PAGE_START);

        jPanel1.add(pnlColors);
        pnlColors.getAccessibleContext().setAccessibleName("");

        spltPropertiesObjects.setRightComponent(jPanel1);

        graphicPrimitivesPanel.setBackground(new java.awt.Color(155, 155, 155));
        spltPropertiesObjects.setLeftComponent(graphicPrimitivesPanel);

        tbarControl.add(spltPropertiesObjects);

        spltCentral.setRightComponent(tbarControl);

        scrollPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        pnlCanvas.setBackground(new java.awt.Color(255, 255, 255));
        pnlCanvas.setForeground(new java.awt.Color(255, 255, 255));
        pnlCanvas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlCanvas.setPreferredSize(new java.awt.Dimension(650, 400));

        toolBar.setBackground(new java.awt.Color(155, 155, 155));
        toolBar.setRollover(true);
        toolBar.setPreferredSize(new java.awt.Dimension(687, 30));

        btnPoint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/point_icon.png"))); // NOI18N
        btnPoint.setBorderPainted(false);
        btnPoint.setContentAreaFilled(false);
        btnPoint.setFocusable(false);
        btnPoint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPoint.setMinimumSize(new java.awt.Dimension(50, 50));
        btnPoint.setPreferredSize(new java.awt.Dimension(60, 60));
        btnPoint.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/point_icon_selected.png"))); // NOI18N
        btnPoint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPointActionPerformed(evt);
            }
        });
        toolBar.add(btnPoint);

        btnLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/line_icon.png"))); // NOI18N
        btnLine.setBorderPainted(false);
        btnLine.setContentAreaFilled(false);
        btnLine.setFocusable(false);
        btnLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLine.setMinimumSize(new java.awt.Dimension(50, 50));
        btnLine.setPreferredSize(new java.awt.Dimension(60, 60));
        btnLine.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/line_icon_selected.png"))); // NOI18N
        btnLine.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLineActionPerformed(evt);
            }
        });
        toolBar.add(btnLine);

        btnPolyLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/polyline_icon.png"))); // NOI18N
        btnPolyLine.setBorderPainted(false);
        btnPolyLine.setContentAreaFilled(false);
        btnPolyLine.setFocusable(false);
        btnPolyLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPolyLine.setMinimumSize(new java.awt.Dimension(50, 50));
        btnPolyLine.setPreferredSize(new java.awt.Dimension(60, 60));
        btnPolyLine.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/polyline_icon_selected.png"))); // NOI18N
        btnPolyLine.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPolyLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPolyLineActionPerformed(evt);
            }
        });
        toolBar.add(btnPolyLine);

        btnRectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/rectangle_icon.png"))); // NOI18N
        btnRectangle.setBorderPainted(false);
        btnRectangle.setContentAreaFilled(false);
        btnRectangle.setFocusable(false);
        btnRectangle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRectangle.setMinimumSize(new java.awt.Dimension(50, 50));
        btnRectangle.setPreferredSize(new java.awt.Dimension(60, 60));
        btnRectangle.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/rectangle_icon_selected.png"))); // NOI18N
        btnRectangle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRectangleActionPerformed(evt);
            }
        });
        toolBar.add(btnRectangle);

        btnCurve.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/curve_icon.png"))); // NOI18N
        btnCurve.setBorderPainted(false);
        btnCurve.setContentAreaFilled(false);
        btnCurve.setFocusable(false);
        btnCurve.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCurve.setMinimumSize(new java.awt.Dimension(50, 50));
        btnCurve.setPreferredSize(new java.awt.Dimension(60, 60));
        btnCurve.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/curve_icon_selected.png"))); // NOI18N
        btnCurve.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCurve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCurveActionPerformed(evt);
            }
        });
        toolBar.add(btnCurve);

        btnCircle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/circle_icon.png"))); // NOI18N
        btnCircle.setBorderPainted(false);
        btnCircle.setContentAreaFilled(false);
        btnCircle.setFocusable(false);
        btnCircle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCircle.setMinimumSize(new java.awt.Dimension(50, 50));
        btnCircle.setPreferredSize(new java.awt.Dimension(60, 60));
        btnCircle.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/circle_icon_selected.png"))); // NOI18N
        btnCircle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCircle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCircleActionPerformed(evt);
            }
        });
        toolBar.add(btnCircle);

        btnOval.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/ellipse_icon.png"))); // NOI18N
        btnOval.setBorderPainted(false);
        btnOval.setContentAreaFilled(false);
        btnOval.setFocusable(false);
        btnOval.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOval.setMinimumSize(new java.awt.Dimension(50, 50));
        btnOval.setPreferredSize(new java.awt.Dimension(60, 60));
        btnOval.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/ellipse_icon_selected.png"))); // NOI18N
        btnOval.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOvalActionPerformed(evt);
            }
        });
        toolBar.add(btnOval);

        btnArc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/arc_icon.png"))); // NOI18N
        btnArc.setBorderPainted(false);
        btnArc.setContentAreaFilled(false);
        btnArc.setFocusable(false);
        btnArc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnArc.setMaximumSize(new java.awt.Dimension(39, 39));
        btnArc.setMinimumSize(new java.awt.Dimension(50, 50));
        btnArc.setPreferredSize(new java.awt.Dimension(60, 60));
        btnArc.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/arc_icon_selected.png"))); // NOI18N
        btnArc.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnArc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArcActionPerformed(evt);
            }
        });
        toolBar.add(btnArc);

        btnJoin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/link_icon.png"))); // NOI18N
        btnJoin.setBorderPainted(false);
        btnJoin.setContentAreaFilled(false);
        btnJoin.setFocusable(false);
        btnJoin.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnJoin.setMinimumSize(new java.awt.Dimension(50, 50));
        btnJoin.setPreferredSize(new java.awt.Dimension(60, 60));
        btnJoin.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/icons/link_icon_selected.png"))); // NOI18N
        btnJoin.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJoinActionPerformed(evt);
            }
        });
        toolBar.add(btnJoin);

        javax.swing.GroupLayout pnlCanvasLayout = new javax.swing.GroupLayout(pnlCanvas);
        pnlCanvas.setLayout(pnlCanvasLayout);
        pnlCanvasLayout.setHorizontalGroup(
            pnlCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCanvasLayout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 1115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlCanvasLayout.setVerticalGroup(
            pnlCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCanvasLayout.createSequentialGroup()
                .addContainerGap(492, Short.MAX_VALUE)
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        scrollPane.setViewportView(pnlCanvas);

        spltCentral.setLeftComponent(scrollPane);

        mainPanel.add(spltCentral, java.awt.BorderLayout.CENTER);

        tbarPositionsPanel.add(mainPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(tbarPositionsPanel, java.awt.BorderLayout.CENTER);

        menuFile.setText("File");

        menuItemNew.setText("New");
        menuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewActionPerformed(evt);
            }
        });
        menuFile.add(menuItemNew);

        menuItemOpen.setText("Open");
        menuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemOpenActionPerformed(evt);
            }
        });
        menuFile.add(menuItemOpen);

        menuItemSave.setText("Save");
        menuFile.add(menuItemSave);

        menuItemSaveAs.setText("Save as");
        menuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSaveAs);

        menuBar.add(menuFile);

        menuEdit.setText("Edit");

        menuItemRefresh.setText("Refresh");
        menuItemRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRefreshActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemRefresh);

        menuItemClearSelection.setText("Unselected");
        menuItemClearSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemClearSelectionActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemClearSelection);

        menuBar.add(menuEdit);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged

    }//GEN-LAST:event_formWindowStateChanged

    private void menuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewActionPerformed
        drawingController.clean();
        graphicPrimitivesPanel.clean();
        refresh();
    }//GEN-LAST:event_menuItemNewActionPerformed

    private void menuItemRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRefreshActionPerformed
        Canvas.getCanvasInstance().resize();
        refresh();
    }//GEN-LAST:event_menuItemRefreshActionPerformed

    private void menuItemClearSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemClearSelectionActionPerformed
        drawingController.setSelectedGraphicPrimitive(null);
        drawingController.setState(DrawingStateController.IDLE);
    }//GEN-LAST:event_menuItemClearSelectionActionPerformed

    private void menuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveAsActionPerformed
        int retSave = fc.showSaveDialog(this);

        if (retSave == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            persistenceController.persistAsObjects(file, Canvas.getCanvasInstance().getImageController());
        }
    }//GEN-LAST:event_menuItemSaveAsActionPerformed

    private void menuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemOpenActionPerformed
       int retOpen = fc.showSaveDialog(this);

        if (retOpen == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            ImageController ic = persistenceController.loadFromObjects(file);
            Canvas.getCanvasInstance().setImageController(ic);
            refresh();
        }
    }//GEN-LAST:event_menuItemOpenActionPerformed

    private void btnJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJoinActionPerformed

        //drawingController.setSelectedGPToDraw(Join.class);
        if (btnJoin.isSelected()) {
            btnJoin.setSelected(false);
            drawingController.setSelectedGPToDraw(null);
        } else {
            resetButtonSelection();
            btnJoin.setSelected(true);
            //drawingController.setSelectedGPToDraw(Join.class);
        }
}//GEN-LAST:event_btnJoinActionPerformed

    private void btnArcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArcActionPerformed
        drawingController.setSelectedGPToDraw(Arc.class);
        if (btnArc.isSelected()) {
            btnArc.setSelected(false);
            drawingController.setSelectedGPToDraw(null);
        } else {
            resetButtonSelection();
            btnArc.setSelected(true);
            drawingController.setSelectedGPToDraw(Arc.class);
        }
}//GEN-LAST:event_btnArcActionPerformed

    private void btnOvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOvalActionPerformed
        drawingController.setSelectedGPToDraw(Oval.class);
        if (btnOval.isSelected()) {
            btnOval.setSelected(false);
            drawingController.setSelectedGPToDraw(null);
        } else {
            resetButtonSelection();
            btnOval.setSelected(true);
            drawingController.setSelectedGPToDraw(Oval.class);
        }
}//GEN-LAST:event_btnOvalActionPerformed

    private void btnCurveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCurveActionPerformed
        drawingController.setSelectedGPToDraw(Curve.class);
        if (btnCurve.isSelected()) {
            btnCurve.setSelected(false);
            drawingController.setSelectedGPToDraw(null);
        } else {
            resetButtonSelection();
            btnCurve.setSelected(true);
            drawingController.setSelectedGPToDraw(Curve.class);
        }
}//GEN-LAST:event_btnCurveActionPerformed

    private void btnRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRectangleActionPerformed
        if (btnRectangle.isSelected()) {
            btnRectangle.setSelected(false);
            drawingController.setSelectedGPToDraw(null);
        } else {
            resetButtonSelection();
            btnRectangle.setSelected(true);
            drawingController.setSelectedGPToDraw(Rectangle.class);
        }
}//GEN-LAST:event_btnRectangleActionPerformed

    private void btnPolyLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPolyLineActionPerformed
        drawingController.setSelectedGPToDraw(PolyLine.class);
        if (btnPolyLine.isSelected()) {
            btnPolyLine.setSelected(false);
            drawingController.setSelectedGPToDraw(null);
        } else {
            resetButtonSelection();
            btnPolyLine.setSelected(true);
            drawingController.setSelectedGPToDraw(PolyLine.class);
        }
}//GEN-LAST:event_btnPolyLineActionPerformed

    private void btnLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineActionPerformed
        drawingController.setSelectedGPToDraw(Line.class);
        if (btnLine.isSelected()) {
            btnLine.setSelected(false);
            drawingController.setSelectedGPToDraw(null);
        } else {
            resetButtonSelection();
            btnLine.setSelected(true);
            drawingController.setSelectedGPToDraw(Line.class);
        }
}//GEN-LAST:event_btnLineActionPerformed

    private void btnPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPointActionPerformed
        drawingController.setSelectedGPToDraw(Point.class);
        if (btnPoint.isSelected()) {
            btnPoint.setSelected(false);
            drawingController.setSelectedGPToDraw(null);
        } else {
            resetButtonSelection();
            btnPoint.setSelected(true);
            drawingController.setSelectedGPToDraw(Point.class);
        }
}//GEN-LAST:event_btnPointActionPerformed

    private void btnCircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCircleActionPerformed
          drawingController.setSelectedGPToDraw(Circle.class);
        if (btnCircle.isSelected()) {
            btnCircle.setSelected(false);
            drawingController.setSelectedGPToDraw(null);
        } else {
            resetButtonSelection();
            btnCircle.setSelected(true);
            drawingController.setSelectedGPToDraw(Circle.class);
        }
    }//GEN-LAST:event_btnCircleActionPerformed

    private void resetButtonSelection() {
        drawingController.setSelectedGPToDraw(null);
        btnCurve.setSelected(false);
        btnLine.setSelected(false);
        btnOval.setSelected(false);
        btnPoint.setSelected(false);
        btnRectangle.setSelected(false);
        btnPolyLine.setSelected(false);
        btnJoin.setSelected(false);
        btnCircle.setSelected(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArc;
    private javax.swing.JButton btnCircle;
    private javax.swing.JButton btnCurve;
    private javax.swing.JButton btnJoin;
    private javax.swing.JButton btnLine;
    private javax.swing.JButton btnOval;
    private javax.swing.JButton btnPoint;
    private javax.swing.JButton btnPolyLine;
    private javax.swing.JButton btnRectangle;
    private gui.panels.GraphicPrimitivesPanel graphicPrimitivesPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuItemClearSelection;
    private javax.swing.JMenuItem menuItemNew;
    private javax.swing.JMenuItem menuItemOpen;
    private javax.swing.JMenuItem menuItemRefresh;
    private javax.swing.JMenuItem menuItemSave;
    private javax.swing.JMenuItem menuItemSaveAs;
    private javax.swing.JPanel pnlCanvas;
    private javax.swing.JPanel pnlColors;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSplitPane spltCentral;
    private javax.swing.JSplitPane spltPropertiesObjects;
    private javax.swing.JToolBar tbarControl;
    private javax.swing.JPanel tbarPositionsPanel;
    private javax.swing.JTable tblColorChooser;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    private ColorTableModel colorTableModel = new ColorTableModel();

    @Override
    public void refresh() {
        graphicPrimitivesPanel.refresh();
        
        Canvas.getCanvasInstance().repaint();
    }

    @Override
    public void updateData() {
        graphicPrimitivesPanel.dataChanged();
    }

    
    @Override
    public void valueChanged(ListSelectionEvent e) {
        int selectedRow = graphicPrimitivesPanel.getTblGraphicsPrimitive().getSelectedRow();


        if (selectedRow != -1) {
            resetButtonSelection();
            List<GraphicPrimitive> gps = ((GraphicPrimitivesTableModel)graphicPrimitivesPanel.
                                            getTblGraphicsPrimitive().
                                            getModel()).
                                            getGraphicPrimitives();

            GraphicPrimitive gp = gps.get(selectedRow);

            drawingController.setSelectedGraphicPrimitive(gp);
            

            Canvas.getCanvasInstance().repaint();
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        if (tblColorChooser.getSelectedRow() == 0) {
            Canvas.getCanvasInstance().setBackgroundColor( (Color)colorEditor.getCellEditorValue() );
        } else {
            Canvas.getCanvasInstance().setBorderColor( (Color)colorEditor.getCellEditorValue() );
        }
        refresh();
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        System.out.println("Editing canceled");
    }

    public void initializeCellEditor() {
        DefaultCellEditor defaultCellEditor = new DefaultCellEditor(new JTextField());
        defaultCellEditor.addCellEditorListener(this);
        
    }


    public void actionPerformed(ActionEvent e) {
        int selectedRow = graphicPrimitivesPanel.getTblGraphicsPrimitive().getSelectedRow();

        if (selectedRow != -1) {
            List<GraphicPrimitive> gps = ((GraphicPrimitivesTableModel)graphicPrimitivesPanel.
                                            getTblGraphicsPrimitive().
                                            getModel()).
                                            getGraphicPrimitives();

            GraphicPrimitive gp = gps.get(selectedRow);
            gps.remove(gp);
        }

        refresh();
        updateData();

        if (selectedRow -1 >= 0) {
            selectedRow--;
            graphicPrimitivesPanel.getTblGraphicsPrimitive().setRowSelectionInterval(selectedRow, selectedRow);
        } else {
            Canvas.getCanvasInstance().cleanRaster();
        }
    }


}
